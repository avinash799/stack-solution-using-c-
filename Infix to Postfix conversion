

class Solution {
  public:
    // Function to convert an infix expression to a postfix expression.
    int priority(char op) {
        if (op == '+' || op == '-') return 1;
        if (op == '*' || op == '/') return 2;
        if (op == '^') return 3; 
        return 0; 
    }
    string infixToPostfix(string s) {
        // Your code here
        int i=0; stack<char>st;
        int n=s.size();
        string ans;
        for(int i=0;i<n;i++){
             if ((s[i] >= 'A' && s[i] <= 'Z') ||
                (s[i] >= 'a' && s[i] <= 'z') ||
                (s[i] >= '0' && s[i] <= '9')) {
                ans += s[i];
            }
            // If it is an opening bracket
            else if (s[i] == '(') {
                st.push(s[i]);
            }
            // If it is an opening bracket
            else if(s[i]=='('){
                st.push(s[i]);
            }
             // If it is a closing bracket
            else if(s[i]==')'){
                while(!st.empty()  && st.top() !='('){
                    ans+=st.top();
                    st.pop();
                    
                }
                st.pop();
            }
            // If it is an operator
            else{
                while(!st.empty()  && priority(st.top())>=priority(s[i])){
                    ans=ans+st.top();
                    st.pop();
                }
                st.push(s[i]);
            }
          
        }
        while(!st.empty()){
            ans=ans+st.top();
            st.pop();
        }
        return ans;
    }
};


